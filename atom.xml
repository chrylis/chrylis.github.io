<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Hardbits</title>
 <link href="https://blog.chrylis.com/atom.xml" rel="self"/>
 <link href="https://blog.chrylis.com/"/>
 <updated>2015-11-13T15:29:43+00:00</updated>
 <id>https://blog.chrylis.com</id>
 <author>
   <name>Christopher Smith</name>
   <email>chrylis@gmail.com</email>
 </author>

 
 <entry>
   <title>Introducing the Groovy JPA Toolkit</title>
   <link href="https://blog.chrylis.com/2015/11/13/introducing-gjt/"/>
   <updated>2015-11-13T00:00:00+00:00</updated>
   <id>https://blog.chrylis.com/2015/11/13/introducing-gjt</id>
   <content type="html">&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;code-setup-code&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikibooks.org/wiki/Java_Persistence/What_is_JPA%3F&quot;&gt;Java Persistence API&lt;/a&gt; is a
wonderful tool for mapping Java persistent domain classes onto a data store (usually, but not
always, a SQL database). JPA providers such as &lt;a href=&quot;http://hibernate.org/orm&quot;&gt;Hibernate ORM&lt;/a&gt; manage
mappings, conversions, lazy joins, transactions, and more with minimal effort on our part.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, even though JPA is comparatively lightweight (anyone remember
&lt;a href=&quot;https://docs.oracle.com/cd/E16439_01/doc.1013/e13981/ent21imp001.htm&quot;&gt;EJB CMP&lt;/a&gt;?), there are a few
common bits of boilerplate that get repeated ad nauseam, such as specifying &lt;code&gt;@Id&lt;/code&gt; and &lt;code&gt;@Version&lt;/code&gt;
fields, and
&lt;a href=&quot;https://schuchert.wikispaces.com/JPA+Tutorial+1+-+Make+Relationship+Bi-directional&quot;&gt;managing&lt;/a&gt;
&lt;a href=&quot;https://dzone.com/articles/jpa-implementation-patterns-4&quot;&gt;bidirectional&lt;/a&gt;
&lt;a href=&quot;http://blog.jbaysolutions.com/2011/09/19/jpa-2-relationships-onetomany/&quot;&gt;relationships&lt;/a&gt;
is a tedious chore that is prone to subtle heisenbugs. Repetitive code ought to be replaced with
intelligent tooling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some of these issues have been addressed to varying degrees:
&lt;a href=&quot;https://projects.spring.io/spring-roo/&quot;&gt;Spring Roo&lt;/a&gt;, for example, uses AspectJ to insert bookkeeping
fields and property accessors into POJOs using inter-type declarations. It is, however, limited in
its capabilities for managing relationships, and it requires Maven as a build system.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;code-run-code&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Groovy JPA Toolkit is a uniquely Groovy attempt at streamlining the task of writing JPA domain
classes, using the power of Groovy&amp;#8217;s
&lt;a href=&quot;http://www.groovy-lang.org/metaprogramming.html#_compile_time_metaprogramming&quot;&gt;compile-time
AST transformations&lt;/a&gt;, which allow for comprehensive control over classes as they&amp;#8217;re being compiled.
We can insert properties, add annotations to class members, and even &lt;em&gt;modify other classes&lt;/em&gt;, which
permits managing those pesky relationships and even packaging up some common design patterns
into a single annotation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This series will walk through the development of the GJT, which is a refinement of some ad-hoc
tooling I put together while working on a specific domain implementation and learning the
Groovy AST. I&amp;#8217;ll start with the simple transformations of adding properties, and as we pick up steam
we&amp;#8217;ll tackle some of the more complicated longstanding issues with managing object relationships.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;code-getcontext-code&quot;&gt;&lt;code&gt;getContext()&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of my own understanding of Groovy&amp;#8217;s compile-time metaprogramming comes from
&lt;a href=&quot;http://www.infoq.com/presentations/groovy-compiler&quot;&gt;C&amp;eacute;dric Champeau&amp;#8217;s presentation on the
Groovy compiler&lt;/a&gt; and &lt;a href=&quot;http://www.infoq.com/presentations/groovy-ast-transformations&quot;&gt;Paul King&amp;#8217;s on
AST transformations&lt;/a&gt;, both at SpringOne2GX 2015, as well as jumping into the source for the &lt;code&gt;@Slf4j&lt;/code&gt;
and &lt;code&gt;@ToString&lt;/code&gt; transformations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code is &lt;a href=&quot;https://github.com/chrylis/groovy-jpa-toolkit&quot;&gt;hosted on GitHub&lt;/a&gt; and will be pushed
to &lt;a href=&quot;https://search.maven.org/&quot;&gt;the Central Repository&lt;/a&gt;. Comments on both design and implementation are
welcome. If there&amp;#8217;s a use case that the Toolkit doesn&amp;#8217;t cover that you think can be automated, open
an issue and tell me about it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
 </entry>
 

</feed>
